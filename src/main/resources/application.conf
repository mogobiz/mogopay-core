akka {
  loglevel = WARNING
}

spray {
  # check the reference.conf in /spray-can/main/resources for all defined settings
  # http://spray.io/documentation/1.2.1/spray-can/configuration/
  can {
    server {
      server-header = spray-can/${spray.version}
      ssl-encryption = off
      request-timeout = 10s
    }
  }
  client {
    user-agent-header = spray-can/${spray.version}
    proxy {
      # Proxy settings for unencrypted HTTP requests
      # Set to 'none' to always connect directly, 'default' to use the system
      # settings as described in http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html
      # or specify the proxy host, port and non proxy hosts as demonstrated
      # in the following example:
      # http {
      #   host = myproxy.com
      #   port = 8080
      #   non-proxy-hosts = ["*.direct-access.net"]
      # }
      http = default

      # Proxy settings for HTTPS requests (currently unsupported)
      https = default
    }
  }
  host-connector {
    # The maximum number of parallel connections that an `HttpHostConnector`
    # is allowed to establish to a host. Must be greater than zero.
    max-connections = 4

    # The maximum number of times an `HttpHostConnector` attempts to repeat
    # failed requests (if the request can be safely retried) before
    # giving up and returning an error.
    max-retries = 0

    # Configures redirection following.
    # If set to zero redirection responses will not be followed, i.e. they'll be returned to the user as is.
    # If set to a value > zero redirection responses will be followed up to the given number of times.
    # If the redirection chain is longer than the configured value the first redirection response that is
    # is not followed anymore is returned to the user as is.
    max-redirects = 0

    # If this setting is enabled, the `HttpHostConnector` pipelines requests
    # across connections, otherwise only one single request can be "open"
    # on a particular HTTP connection.
    pipelining = off

    # The time after which an idle `HttpHostConnector` (without open
    # connections) will automatically terminate itself.
    # Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 30 s

    # If a request hasn't been responded to after the time period set here
    # a `spray.http.Timedout` message will be sent to the timeout handler.
    # Set to `infinite` to completely disable request timeouts.
    request-timeout = 2000 s

    # Modify to tweak client settings for this host-connector only.
    client = ${spray.can.client}
  }
  # check the reference.conf in /spray-routing/main/resources for all defined settings
  routing {
    file-chunking-threshold-size = 10k
    file-chunking-chunk-size = 5k
  }

  interface = "localhost.com"
  port = 8080

}


session {
  folder = "/tmp"
  secret = "067e6162-3b6f-4ae2-a171-2470b63dff00"
  cookie.name = "mogopay_uuid"
  maxage = 3600
  remember.cookie.name = "__rid"
  remember.cookie.maxage = 1209600
}

oauth {
  twitter {
    callback = "http://mogobiz.ebiznext.com/oauth/twitter/callback"
    consumer.key = "1MA5vDAwtC9BZultDxGXw"
    consumer.secret = "Io8dvnkWSrtgKsD1steB2rzDYIFahwKT6u4nN3rH4"
    scope = ""
    resource.url = "https://api.twitter.com/1.1/users/show.json?"
  }
  linkedin {
    callback = "http://mogobiz.ebiznext.com/oauth/linkedin/callback"
    consumer.key = "yo4od3u7whae"
    consumer.secret = "K37mJyiYjpJNStkc"
    scope = "r_basicprofile,r_emailaddress"
    resource.url = "http://api.linkedin.com/v1/people/~:(id,first-name,last-name,email-address)?format=json"
  }
  google {
    callback = "http://mogobiz.ebiznext.com/oauth/google/callback"
    consumer.key = "316165947118-vohtjb0cfr8tovsflkjf9vnla71vt59q.apps.googleusercontent.com"
    consumer.secret = "ARZhh5z6oPZrDxp6FpUK5nB3"
    scope = "https://www.googleapis.com/auth/userinfo.email"
    resource.url = "https://www.googleapis.com/plus/v1/people/me"
  }
  facebook {
    callback = "http://mogobiz.ebiznext.com/oauth/facebook/callback"
    consumer.key = "102076459880504"
    consumer.secret = "3d70f3cb481772b9f1e42f9b2195d17f"
    scope = ""
    resource.url = "https://graph.facebook.com/me"
  }
  github {
    callback = "http://mogobiz.ebiznext.com/oauth/github/callback"
    consumer.key = "48c619e930e58b7345cf"
    consumer.secret = "d73a194b8672c7db3d18f3e1adb682095a0f39d1"
    scope = "user:email"
    resource.url = "https://api.github.com/user"
  }

  yahoo {
    callback = "http://mogobiz.ebiznext.com/oauth/yahoo/callback"
    consumer.key = "dj0yJmk9TmMxeVhjMkJuaGVsJmQ9WVdrOU0wRXlWekJ3TkRnbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD0yZQ--"
    consumer.secret = "ccbf6682ad99d4e142a0c858ac6343462f398cf2"
    scope = ""
    resource.url = "http://social.yahooapis.com/v1/user/me/profile/status?format=json"
  }
}

notification {
  gcm {
    key = "AIzaSyDKpxv6m5IhLoXlaOIEsLDU8isB_ARg_go"
  }
  apns {
    keystore {
      name = ""
      type = ""
    }
    password = ""
    host = ""
    port = ""
    token.size = 64

  }
}

mail.smtp.host = "smtp.gmail.com"
mail.smtp.port = 465
mail.smtp.username = "ccmunoreply@gmail.com"
mail.smtp.password = "e-z12B24"
mail.smtp.auth = true
mail.smtp.ssl = true
mail.smtp.checkserveridentity = false
mail.smtp.starttls = false
mail.from = "ccmunoreply@gmail.com"

mail.confirmation.from = "ccmunoreply@gmail.com"

# 24hr 1000 * 60 * 60 * 24
mail.confirmation.maxAge = 86400000

# Transaction duration before it is considered as expired
# duration between payment and confirmation in seconds
transaction.duration = 60

#SMS Sender
clickatell.user = 'ebiznext'
clickatell.password = 'ebiznext_0310'
clickatell.api_id = '3348707'
clickatell.sender = 'Ebiznext'
clickatell.clientID = 'EEE696'


# timeout in minutes for transactions
transaction.maxInactiveInterval = 300


# 1000 * 60 * 60 * 24 (24hours)
recycleAccount.duration = 86400000


# 1000 * 60 * 10 (10 minutes)
transactionRequest.duration = 600000

account.validate.merchantphone = false
account.validate.merchantemail = false
account.validate.customerphone = false
account.validate.customeremail = true
account.validate.merchant.emails = "@merchant.com,seller@me.com"
account.validate.merchant.default = "mogopay@merchant.com"
account.validate.customershared = true
account.validate.password.maxattempts = 3
maxQueryResults = 50

payline.directendpoint = "https://homologation.payline.com/V4/services/DirectPaymentAPI"
payline.webendpoint = "https://homologation.payline.com/V4/services/WebPaymentAPI"
# payline.webendpoint="https://services.payline.com/V4/services/WebPaymentAPI"
payline.paymentAction = "101"
payline.paymentMode = "CPT"
payline.languageCode = "eng"
payline.securityMode = "SSL"
payline.version = "3"

paypal.urlNvpApi = "https://api-3t.sandbox.paypal.com/nvp"
paypal.urlExpresschout = "https://www.sandbox.paypal.com/webscr"
paypal.version = "78"

paybox.pbxporteur = "contact@ebiznext.com"
paybox.pemfile = "/data/mogopay/paybox/paybox.pem"
paybox.directendpoint = "https://preprod-ppps.paybox.com/PPPS.php"
paybox.mpiendpoint = "https://preprod-tpeweb.paybox.com/cgi/RemoteMPI.cgi"
paybox.systemendpoint = "https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi"


sips.certif.dir = "/data/mogopay/sips/paramtest/"
sips.pathfile = "/data/mogopay/sips/param/pathfile"

systempay.version = "V2"
systempay.url = "https://paiement.systempay.fr/vads-payment/"


import.countries.dir = "/data/mogopay/import/countries/"
import.countries.codes = ["FR", "GB", "SN"]

db.select.forupdate = "select %s from %s where %s  for update"

mogopay.endpoint = "http://localhost.com:8080/pay/"

jobs.cron.transactionrequest = 600 // 10 minutes
jobs.cron.recycleaccount = 3600    // 1 hour
jobs.cron.importcountries = 86400  // 1 day
jobs.delay.transactionrequest = 60
jobs.delay.recycleaccount = 60
jobs.delay.importcountries = 60

elasticsearch {
  date.format="yyyy-MM-dd'T'HH:mm:ss.SSSZZ"
  host="localhost"
  http.port=9200
  port=9300
  index = "mogopay"
  cluster="elasticsearch"
}

application.secret=1234567890123456